# JuffEd: simple text editor with syntax highlighting
# configure script

PACKAGE_NAME="juffed"
PACKAGE_VERSION=`cat version`

prefix="/usr"
bindir="${prefix}/bin"
datadir="${prefix}/share"
destdir="${datadir}/${PACKAGE_NAME}"

usage() {
	echo ""
	echo "  Usage: ./configure [options]"
	echo ""
	echo "  Available options:"
	echo "   --help                      Print this message"
	echo "   --clean                     Clean results of configuring and quit"
	echo "   --prefix=<prefix>           Set prefix (default: /usr)"
	echo "   --datadir=<dir>             Set data dir (default: ${prefix}/share"
	echo "   --qmake=<name>              Set qmake executable"
	echo "   --lrelease=<name>           Set lrelease executable"
	echo "   --qsci_lib_path=<path>      Set QScintilla lib path (if non-standard)"
	echo "   --qsci_include_path=<path>  Set QScintilla include path (if non-standard)"
	echo ""
}

clean_all() {
	rm src/AppInfo.h src/juffed.pro Makefile 2>/dev/null
	rm -rf juffed_qt4_test_dir juffed_qsci_test_dir
}

############################################################
#	Read parameters
############################################################

for arg in ${@}; do
	case ${arg} in
	
	--help)
		usage
		exit 0
		;;

	--clean)
		clean_all
		rm configure.log 2>/dev/null
		exit 0
		;;
	
	--prefix=*)
		arg_prefix=`echo ${arg} | cut -c 10-`
		;;

	--datadir=*)
		arg_datadir=`echo ${arg} | cut -c 11-`
		;;

	--qmake=*)
		arg_qmake_cmd=`echo ${arg} | cut -c 9-`
		;;
	
	--lrelease=*)
		arg_lrelease_cmd=`echo ${arg} | cut -c 12-`
		;;

	--qsci_include_path=*)
		arg_qsci_include_path=`echo ${arg} | cut -c 21-`
		;;

	--qsci_lib_path=*)
		arg_qsci_lib_path=`echo ${arg} | cut -c 17-`
		;;

	*)
		echo "Unrecognized option: ${arg}"
		usage
		exit 1
		;;

	esac

done

clean_all
rm configure.log 2>/dev/null

if [ -n "${arg_prefix}" ]; then
	prefix="${arg_prefix}"
	bindir="${prefix}/bin"
	datadir="${prefix}/share"
	destdir="${datadir}/${PACKAGE_NAME}"
fi

if [ -n "${arg_datadir}" ]; then
	datadir="${arg_datadir}"
	destdir="${datadir}/${PACKAGE_NAME}"
fi



############################################################
#	Check for commands
############################################################

#	make
echo -n "checking for make... "
if [ -n "${make_cmd}" ]; then
	make_cmd=`which ${make_cmd}`
else
	make_cmd=`which make`
	if [ -z "${make_cmd}" ]; then
		make_cmd=`which gmake`
	fi
fi
if [ -n "${make_cmd}" ]; then
	echo "${make_cmd}"
else
	echo "no"
	exit 1
fi

#	qmake
echo -n "checking for qmake... "
if [ -n "${arg_qmake_cmd}" ]; then
	qmake_cmd=`which ${arg_qmake_cmd}`
else
	qmake_cmd=`which qmake-qt4`
	if [ -z "${qmake_cmd}" ]; then
		qmake_cmd=`which qmake`
	fi
fi
if [ -n "${qmake_cmd}" ]; then
	echo "${qmake_cmd}"
else
	echo "no"
	exit 1
fi

#	lrelease
echo -n "checking for lrelease... "
if [ -n "${arg_lrelease_cmd}" ]; then
	lrelease_cmd=`which ${arg_lrelease_cmd}`
else
	lrelease_cmd=`which lrelease-qt4`
	if [ -z "${lrelease_cmd}" ]; then
		lrelease_cmd=`which lrelease`
	fi
fi
if [ -n "${lrelease_cmd}" ]; then
	echo "${lrelease_cmd}"
else
	echo "no"
	exit 1
fi



############################################################
#	Check for includes and libraries paths
############################################################

##############################
#	Qt4
TEST_DIR="juffed_qt4_test_dir"

rm -rf ${TEST_DIR} 2>/dev/null
mkdir ${TEST_DIR}

echo -n "Running Qt4 test... "

###############
#	test file
cat > ${TEST_DIR}/qt4_test.cpp << _TEST_EOF
#include <QtCore/QObject>
#include <QtGui/QWidget>
#include <QtXml/QDomAttr>
#include <QString>
#include <QActionEvent>
int main(){QWidget w;return 0;}
_TEST_EOF

cd ${TEST_DIR}
${qmake_cmd} -project -o test.pro
echo "" >> test.pro
echo "QT  += xml" >> test.pro
${qmake_cmd} 2>configure.log
${make_cmd} 1>/dev/null 2>>configure.log

test_prg=`cat configure.log`
cd ..
rm -rf ${TEST_DIR} 2>/dev/null

if [ -z "${test_prg}" ]; then
	echo "passed."
else
	echo "failed."
	echo "Please check your libqt4-dev installation and configuration"
	exit 1
fi


##############################
#	QScintilla2
TEST_DIR="juffed_qsci_test_dir"

rm -rf ${TEST_DIR} 2>/dev/null
mkdir ${TEST_DIR}

echo -n "Running QScintilla2 test... "

###############
#	test file
cat > ${TEST_DIR}/cfg_qsci_test.cpp << _TEST_EOF
#include <Qsci/qsciscintilla.h>
int main(){QsciScintilla s;return 0;}
_TEST_EOF



cd ${TEST_DIR}
${qmake_cmd} -project -o test.pro
echo "" >> test.pro
echo "QT  += xml" >> test.pro
echo "LIBS += -lqscintilla2" >> test.pro
if [ -n "${arg_qsci_include_path}" ]; then
	echo "INCLUDEPATH += ${arg_qsci_include_path}" >> test.pro
fi
if [ -n "${arg_qsci_lib_path}" ]; then
	echo "LIBS += -L${arg_qsci_lib_path}" >> test.pro
fi

${qmake_cmd} 2>configure.log
${make_cmd} 1>/dev/null 2>>configure.log

test_prg=`cat configure.log`
cd ..
rm -rf ${TEST_DIR} 2>/dev/null


if [ -z "${test_prg}" ]; then
	echo "passed"
else
	echo "failed."
	echo "Please check your libqscintilla2-dev installation and/or specify valid --qsci_lib_path and --qsci_include_path"
	exit 1
fi



############################################################
#	AppInfo.h
############################################################
tmp=`touch src/AppInfo.h`
if [ -n "${tmp}" ]; then
	echo "Can't create file src/AppInfo.h. Please check your distribution."
	exit 1
fi

echo '#ifndef _APP_INFO_H_
#define _APP_INFO_H_

#include <QtCore/QDir>
#include <QtCore/QString>

class AppInfo {
public:
	static QString name() { return "JuffEd"; }
	static QString organization() { return "Juff"; }
	static QString configDir() { return QDir::homePath() + "/.config/" + organization().toLower(); }
	static QString configFile() { return configDir() + "/" + name().toLower() + ".conf"; }
	static QString version() { return "'${PACKAGE_VERSION}'"; }
	static QString logFile() { return configDir() + "/juffed.log"; }
	static QString socketPath() { return "/tmp/juffed"; }
	static QString appDirPath() { return "'${destdir}'"; }
};

#endif' > src/AppInfo.h



############################################################
#	Makefile
############################################################
echo 'FAKE_ROOT=
BIN=$(FAKE_ROOT)'${bindir}'
DESTDIR=$(FAKE_ROOT)'${destdir}'
PIXMAPS=$(FAKE_ROOT)'${datadir}'/pixmaps
APPLICATIONS=$(FAKE_ROOT)'${datadir}'/applications

QMAKE='${qmake_cmd}'
MAKE='${make_cmd}'
LRELEASE='${lrelease_cmd}'

src/juffed:
	cd src && $(QMAKE) && $(MAKE)
	cd src && $(LRELEASE) juffed.pro

distclean:
	rm juffed
	rm l10n/juffed_*.qm
	cd src && make clean
	rm src/Makefile

clean:
	cd src && make clean
	rm src/Makefile

install:
#	Directories
	install -d $(DESTDIR)
	install -d $(DESTDIR)/l10n
	install -d $(DESTDIR)/hlschemes
#	Copy files
	install -m 644 COPYING $(DESTDIR)
	install -m 644 README $(DESTDIR)
	install -m 644 l10n/*.qm $(DESTDIR)/l10n/
	install -m 644 hlschemes/*.xml $(DESTDIR)/hlschemes/
#	Binary
	install -d $(BIN)
	install -m 755 juffed $(BIN)
#	App icon and .desktop file
	install -d $(PIXMAPS)
	install -d $(APPLICATIONS)
	install -m 644 juffed.png $(PIXMAPS)/
	install -m 644 juffed.desktop $(APPLICATIONS)/

uninstall:
	rm -rf $(DESTDIR)
	rm $(BIN)/juffed
	rm $(PIXMAPS)/juffed.png
	rm $(APPLICATIONS)/juffed.desktop
' > Makefile


############################################################
#	juffed.pro
############################################################
tmp=`touch src/juffed.pro`
if [ -n "${tmp}" ]; then
	echo "Can't create file src/juffed.pro. Please check your distribution."
	exit 1
fi

echo 'TEMPLATE = app
TARGET      = juffed
DEPENDPATH  += .
INCLUDEPATH += .
DESTDIR	    = ..
QT          += xml
LIBS        += -lqscintilla2

# Input
HEADERS += \
		DocHandler.h \
		JuffEd.h \
		Document.h \
		TextDoc.h \
		NullDoc.h \
		Log.h \
		DocViewer.h \
		DocView.h \
		Settings.h \
		MainSettings.h \
		CommandStorage.h \
		MultiPage.h \
		SettingsDlg.h \
		CharsetsSettingsPage.h \
		TextDocSettings.h \
		TextDocView.h \
		FindDlg.h \
		SessionDlg.h \
		TabBar.h \
		TabWidget.h \
		AboutDlg.h \
		SingleInstance.h \
		SocketListener.h \
		LexerStorage.h \
		IconManager.h \
		ColorButton.h \
		PluginInterface.h \
		PluginManager.h \
		PluginPage.h \
		PluginSettings.h \

SOURCES += \
		DocHandler.cpp \
		JuffEd.cpp \
		main.cpp \
		Document.cpp \
		TextDoc.cpp \
		NullDoc.cpp \
		Log.cpp \
		DocViewer.cpp \
		DocView.cpp \
		Settings.cpp \
		CommandStorage.cpp \
		MultiPage.cpp \
		SettingsDlg.cpp \
		CharsetsSettingsPage.cpp \
		TextDocView.cpp \
		FindDlg.cpp \
		SessionDlg.cpp \
		TabBar.cpp \
		TabWidget.cpp \
		AboutDlg.cpp \
		SingleInstance.cpp \
		SocketListener.cpp \
		LexerStorage.cpp \
		IconManager.cpp \
		MainSettings.cpp \
		TextDocSettings.cpp \
		CharsetsSettings.cpp \
		ColorButton.cpp \
		PluginManager.cpp \
		PluginPage.cpp \
		PluginSettings.cpp \
		
FORMS += \
		CharsetsSettingsPage.ui \
		ViewSettingsPage.ui \
		EditorSettingsPage.ui \
		MainSettingsPage.ui \
		FindDlg.ui \
		SessionDlg.ui \
		
TRANSLATIONS = \
	../l10n/juffed_ru.ts \
	../l10n/juffed_pl.ts \
	../l10n/juffed_de.ts \
	../l10n/juffed_fr.ts \
	../l10n/juffed_sp.ts \
	../l10n/juffed_pt.ts \
	
win32 {
	RC_FILE = juffed.rc
}

RESOURCES = juffed.qrc' > src/juffed.pro
if [ -n "${arg_qsci_include_path}" ]; then
	echo "INCLUDEPATH += ${arg_qsci_include_path}" >> src/juffed.pro
fi
if [ -n "${arg_qsci_lib_path}" ]; then
	echo "LIBS += -L${arg_qsci_lib_path}" >> src/juffed.pro
fi



############################################################
#	configure.log
############################################################
echo "# ${PACKAGE_NAME} was configured with the following parameters:" >> configure.log
echo "#   --prefix=${arg_prefix}" >> configure.log
echo "#   --datadir=${arg_datadir}" >> configure.log
echo "#   --qmake=${arg_qmake_cmd}" >> configure.log
echo "#   --lrelease=${arg_lrelease_cmd}" >> configure.log
echo "#   --qsci_lib_path=${arg_qsci_lib_path}" >> configure.log
echo "#   --qsci_include_path=${arg_qsci_include_path}" >> configure.log
echo "" >> configure.log
echo "# Current file 'configure.log' is a script that can reconfigure ${PACKAGE_NAME} with last used parameters" >> configure.log
echo "# Just type './configure.log' in your shell" >> configure.log
echo "" >> configure.log
echo "" >> configure.log
echo "# Here the script part starts:" >> configure.log
echo "" >> configure.log
echo -n "./configure" >> configure.log
if [ -n "${arg_prefix}" ]; then
	echo -n " --prefix=${arg_prefix}" >> configure.log
fi
if [ -n "${arg_datadir}" ]; then
	echo -n " --datadir=${arg_datadir}" >> configure.log
fi
if [ -n "${arg_qmake_cmd}" ]; then
	echo -n " --qmake=${arg_qmake_cmd}" >> configure.log
fi
if [ -n "${arg_lrelease_cmd}" ]; then
	echo -n " --lrelease=${arg_lrelease_cmd}" >> configure.log
fi
if [ -n "${arg_qsci_include_path}" ]; then 
	echo -n " --qsci_include_path=${arg_qsci_include_path}" >> configure.log
fi
if [ -n "${arg_qsci_lib_path}" ]; then
	echo -n " --qsci_lib_path=${arg_qsci_lib_path}" >> configure.log
fi
echo "" >> configure.log
chmod +x configure.log



############################################################
#	OK
############################################################
echo ""
echo "    It seems like everything is OK."
echo "    Run 'make' now."
echo ""
